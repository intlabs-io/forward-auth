// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates gen_info.go. It can be invoked by running go generate in this directory
package main

import (
	"log"
	"os"
	"text/template"

	"bitbucket.org/_metalogic_/build"
)

func main() {

	info, err := build.GitInfo()
	if err != nil {
		log.Fatal(err)
	}

	f, err := os.Create("gen_info.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Package string
		Info    *build.Info
	}{
		Package: os.Getenv("GOPACKAGE"),
		Info:    info,
	})
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated at {{ .Info.Timestamp }}
package {{ .Package }}

import (
	"fmt"
	"runtime/debug"
	"bitbucket.org/_metalogic_/build"
)

// Info returns module build info
func Info() (info *ProjectInfo, err error) {
	buildInfo, ok := debug.ReadBuildInfo()
	if !ok {
		return info, fmt.Errorf("project must be built with Go modules enabled")
	}

	info = &ProjectInfo{
		build.Info{
			Commit: "{{ .Info.Commit }}",
			Branch: "{{ .Info.Branch }}",
			Timestamp: {{ .Info.Timestamp }},
		},
	}

	info.Project = buildInfo.Main.Path
	info.Command = buildInfo.Path
	for _, m := range buildInfo.Deps {
		info.Dependencies = append(info.Dependencies, m.Path + " (" + m.Version + ")")
	}
	return info, nil
}
`))
