// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Metalogic modifications for level logging with optional JSON output
// Modifications Copyright 2019 The Metalogic Software Authors.

// Package log is a modification of the log package included in the Go standard
// library, adding support for leveled logging, colorized output and JSON formatting.
// A predefined 'standard' logger which is accessible through helper functions
// Error[f|ln], Info[f|ln], Debug[f|ln], and Trace[f|ln]. The standard logger writes
// to standard error and prints the filename and linenumber of the call site
// of each logged message. Every log message is output on a separate line: if the
// message being printed does not end in a newline, the logger will add one.
package log

import (
	"fmt"
	"io"
	"os"
	"runtime"
	"strconv"
	"strings"
	"sync"
	"time"

	"bitbucket.org/_metalogic_/color"
)

// These flags define which text to prefix to each log entry generated by the Logger.
// Bits are or'ed together to control what's printed.
// There is no control over the order they appear (the order listed
// here) or the format they present (as described in the comments).
// The prefix is followed by a colon only when Llongfile or Lshortfile
// is specified.
// For example, flags Ldate | Ltime (or LstdFlags) produce,
//      2009/01/23 01:23:23 message
// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
//      2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
const (
	Ldate         = 1 << iota             // the date in the local time zone: 2009/01/23
	Ltime                                 // the time in the local time zone: 01:23:23
	Lmicroseconds                         // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                             // full file name and line number: /a/b/c/d.go:23
	Lshortfile                            // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                                  // if Ldate or Ltime is set, use UTC rather than the local time zone
	LJSON                                 // JSON encode log records
	LstdFlags     = Ldate | Ltime | LJSON // initial values for the standard logger
)

// A Logger represents an active logging object that generates lines of
// output to an io.Writer. Each logging operation makes a single call to
// the Writer's Write method. Calldepth is the count of the number of
// frames to skip when computing the file name and line number
// if Llongfile or Lshortfile is set. A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
// This logger adds support for leveled logging with optional JSON formatting
// and colorized output if the writer is a terminal
type Logger struct {
	mu        sync.Mutex // ensures atomic writes; protects the following fields
	prefix    string     // prefix to write at beginning of each line
	flag      int        // properties
	out       io.Writer  // destination for log output
	calldepth int        // 2 for direct calls, 3 for calls to the standard logger
	buf       []byte     // for accumulating text to write
	level     Level      // logger will log at the level and above
	colorize  bool       // enable/disable colorized output for terminal writers
	fatal     color.Attribute
	err       color.Attribute
	warn      color.Attribute
	info      color.Attribute
	debug     color.Attribute
	trace     color.Attribute
}

// Level is the type for log levels
type Level int

// the available log levels in increasing level of verbosity
const (
	None Level = iota
	FatalLevel
	ErrorLevel
	WarnLevel
	InfoLevel
	DebugLevel
	TraceLevel
)

// implement flag.Value interface
func (v Level) String() (name string) {
	switch v {
	case 0:
		name = "none"
	case 1:
		name = "fatal"
	case 2:
		name = "error"
	case 3:
		name = "warn"
	case 4:
		name = "info"
	case 5:
		name = "debug"
	case 6:
		name = "trace"
	}
	return name
}

// Set the log level given by the value string
func (v *Level) Set(value string) error {
	switch strings.ToLower(value) {
	case "fatal":
		*v = FatalLevel
	case "error":
		*v = ErrorLevel
	case "warn":
		*v = WarnLevel
	case "info":
		*v = InfoLevel
	case "debug":
		*v = DebugLevel
	case "trace":
		*v = TraceLevel
	default:
		return fmt.Errorf("level must be one of: fatal, error, warn, info, debug or trace")
	}
	return nil
}

// New creates a new Logger. The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line.
// The flag argument defines the logging properties.
func New(out io.Writer, prefix string, flag int) (logger *Logger) {
	return &Logger{
		out:       out,
		prefix:    prefix,
		calldepth: 2,
		flag:      flag,
		level:     InfoLevel,
		colorize:  false,
		fatal:     color.FgBlue,
		err:       color.FgRed,
		warn:      color.FgYellow,
		info:      color.FgGreen,
		debug:     color.FgCyan,
		trace:     color.FgMagenta,
	}
}

func standard(out io.Writer, prefix string, flag int) (logger *Logger) {
	logger = New(out, prefix, flag)
	logger.calldepth = 3
	return logger
}

// the standard logger starts with no prefix followed by short file name and line number
var std = standard(os.Stderr, "", Lshortfile|LJSON)

// DefaultLogger returns the default standard logger
func DefaultLogger() *Logger {
	return std
}

// SetColorize enables/disables colorized output to a terminal writer
func (l *Logger) SetColorize(enabled bool) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.colorize = enabled
}

// Flags returns the output flags for the logger.
func (l *Logger) Flags() int {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.flag
}

// SetFlags sets the output flags for the logger.
func (l *Logger) SetFlags(flag int) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.flag = flag
}

// ClearFlag clears a flag for the logger
func (l *Logger) ClearFlag(flag int) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.flag = l.flag &^ flag
}

// ToggleFlag toggles the current setting of flag
func (l *Logger) ToggleFlag(flag int) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.flag = flag ^ l.flag
}

// HasFlag returns true of flag is set
func (l *Logger) HasFlag(flag int) bool {
	l.mu.Lock()
	defer l.mu.Unlock()
	return flag&l.flag != 0
}

// Level returns the current log level of logger
func (l *Logger) Level() Level {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.level
}

// SetLevel sets the current log level of logger
func (l *Logger) SetLevel(v Level) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.level = v
}

// Prefix returns the output prefix for the logger.
func (l *Logger) Prefix() string {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.prefix
}

// SetPrefix sets the output prefix for the logger.
func (l *Logger) SetPrefix(prefix string) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.prefix = prefix
}

// Writer returns the output destination for the logger.
func (l *Logger) Writer() io.Writer {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.out
}

// SetOutput sets the output destination for the logger.
func (l *Logger) SetOutput(w io.Writer) {
	std.mu.Lock()
	defer l.mu.Unlock()
	l.out = w
}

// Loggable return true if the given level should be logged at the current log level of the logger;
// for example, if current log level is Info then calls to Loggable(log.InfoLevel)
// and Loggable(log.ErrorLevel) would return true while Loggable(log.DebugLevel) would return false
func (l *Logger) Loggable(level Level) bool {
	return level <= l.level
}

// Fatal calls l.Output to unconditionally print to the logger, then calls os.Exit(1)
func (l *Logger) Fatal(v ...interface{}) {
	l.Output(l.calldepth, "fatal", fmt.Sprint(v...))
	os.Exit(1)
}

// Fatalf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Logger) Fatalf(format string, v ...interface{}) {
	l.Output(l.calldepth, "fatal", fmt.Sprintf(format, v...))
	os.Exit(1)
}

// Error calls l.Output to conditionally print message string to the logger
func (l *Logger) Error(v ...interface{}) {
	if l.level < ErrorLevel {
		return
	}
	if l.colorize {
		color.Set(l.err)
		defer color.Unset()
	}
	l.Output(l.calldepth, "error", fmt.Sprint(v...))
}

// Errorf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Logger) Errorf(format string, v ...interface{}) {
	if l.level < ErrorLevel {
		return
	}
	if l.colorize {
		color.Set(l.err)
		defer color.Unset()
	}
	l.Output(l.calldepth, "error", fmt.Sprintf(format, v...))
}

// Warning calls l.Output to conditionally print message string to the logger
func (l *Logger) Warning(v ...interface{}) {
	if l.level < WarnLevel {
		return
	}
	if l.colorize {
		color.Set(l.warn)
		defer color.Unset()
	}
	l.Output(l.calldepth, "warn", fmt.Sprint(v...))
}

// Warningf is present to support the Badger Logger interface which requires it; we treat Warningf == Errorf
func (l *Logger) Warningf(format string, v ...interface{}) {
	if l.level < WarnLevel {
		return
	}
	if l.colorize {
		color.Set(l.warn)
		defer color.Unset()
	}
	l.Output(l.calldepth, "warn", fmt.Sprintf(format, v...))
}

// Info calls l.Output to conditionally print message string to the logger
func (l *Logger) Info(v ...interface{}) {
	if l.level < InfoLevel {
		return
	}
	if l.colorize {
		color.Set(l.info)
		defer color.Unset()
	}
	l.Output(l.calldepth, "info", fmt.Sprint(v...))
}

// Infof calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Logger) Infof(format string, v ...interface{}) {
	if l.level < InfoLevel {
		return
	}
	if l.colorize {
		color.Set(l.info)
		defer color.Unset()
	}
	l.Output(l.calldepth, "info", fmt.Sprintf(format, v...))
}

// Debug calls l.Output to conditionally print message string to the logger
func (l *Logger) Debug(v ...interface{}) {
	if l.level < DebugLevel {
		return
	}
	if l.colorize {
		color.Set(l.debug)
		defer color.Unset()
	}
	l.Output(l.calldepth, "debug", fmt.Sprint(v...))
}

// Debugf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Logger) Debugf(format string, v ...interface{}) {
	if l.level < DebugLevel {
		return
	}
	if l.colorize {
		color.Set(l.debug)
		defer color.Unset()
	}
	l.Output(l.calldepth, "debug", fmt.Sprintf(format, v...))
}

// Trace calls l.Output to conditionally print message string to the logger
func (l *Logger) Trace(v ...interface{}) {
	if l.level < TraceLevel {
		return
	}
	if l.colorize {
		color.Set(l.trace)
		defer color.Unset()
	}
	l.Output(l.calldepth, "trace", fmt.Sprint(v...))
}

// Tracef calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Logger) Tracef(format string, v ...interface{}) {
	if l.level < TraceLevel {
		return
	}
	if l.colorize {
		color.Set(l.trace)
		defer color.Unset()
	}
	l.Output(l.calldepth, "trace", fmt.Sprintf(format, v...))
}

// Cheap integer to fixed-width decimal ASCII. Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

// formatHeader writes log header to buf in following order:
//   * l.prefix (if it's not blank),
//   * date and/or time (if corresponding flags are provided),
//   * file and line number (if corresponding flags are provided).
func (l *Logger) formatHeader(buf *[]byte, t time.Time, file string, line int) {
	*buf = append(*buf, l.prefix...)
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&LUTC != 0 {
			t = t.UTC()
		}
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}
	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, ": "...)
	}
}

// Output writes the output for a logging event.
// The string level is the log level of the caller.
// The string s contains the text to print after the prefix set by the flags of the Logger.
// A newline is appended if the last character of s is not
// already a newline. Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *Logger) Output(calldepth int, level, s string) error {
	now := time.Now() // get this early.
	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.flag&(Lshortfile|Llongfile) != 0 {
		// Release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.mu.Lock()
	}
	l.buf = l.buf[:0]
	if l.flag&LJSON != 0 { //l.json {
		l.jsonHeader(&l.buf, now, file, line)
		l.buf = append(l.buf, `"level": "`...)
		l.buf = append(l.buf, level...)
		l.buf = append(l.buf, `", `...)
		l.buf = append(l.buf, `"message": "`...)
		if s[len(s)-1] == '\n' { // strip newline if present
			l.buf = append(l.buf, s[0:len(s)-1]...)
		} else {
			l.buf = append(l.buf, s...)
		}
		l.buf = append(l.buf, `" }`...)
		l.buf = append(l.buf, '\n')
	} else {
		l.formatHeader(&l.buf, now, file, line)
		l.buf = append(l.buf, s...)
		if len(s) == 0 || s[len(s)-1] != '\n' {
			l.buf = append(l.buf, '\n')
		}
	}

	_, err := l.out.Write(l.buf)
	return err
}

// json writes a JSON-formatted log header to buf in following order:
//   * l.prefix (if it's not blank),
//   * file and line number (if corresponding flags are provided).
//   * date and/or time are not emitted if l.embedded is true (regardless of the setting of their corresponding flags),
func (l *Logger) jsonHeader(buf *[]byte, t time.Time, file string, line int) {
	*buf = append(*buf, '{', ' ')
	if l.prefix != "" {
		*buf = append(*buf, `"prefix": "`...)
		*buf = append(*buf, l.prefix...)
		*buf = append(*buf, `", `...)
	}

	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&LUTC != 0 {
			t = t.UTC()
		}
		if l.flag&Ldate != 0 {
			*buf = append(*buf, "\"date\": "...)
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '-')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '-')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			*buf = append(*buf, "\"time\": "...)
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}
	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		f := "\"file\": \"" + file + "\", \"line\": " + strconv.Itoa(line) + ", "
		*buf = append(*buf, f...)
	}
}

// These functions apply to the standard logger.

// SetFlags sets the flags on the standard logger
func SetFlags(flag int) {
	std.SetFlags(flag)
}

// ClearFlag clears the flag on the standard logger
func ClearFlag(flag int) {
	std.ClearFlag(flag)
}

// ToggleFlag toggles the current value of flag on the standard logger
func ToggleFlag(flag int) {
	std.ToggleFlag(flag)
}

// HasFlag returns true if flag is set on the standard logger
func HasFlag(flag int) bool {
	return std.HasFlag(flag)
}

// GetLevel gets the current log level of the standard logger
func GetLevel() Level {
	return std.level
}

// SetLevel sets the curren log level of the standard loggers
func SetLevel(v Level) {
	std.SetLevel(v)
}

// SetPrefix sets the log prefix of the standard logger
func SetPrefix(pre string) {
	std.SetPrefix(pre)
}

// SetOutput sets the output destination for the standard logger.
func SetOutput(w io.Writer) {
	std.mu.Lock()
	defer std.mu.Unlock()
	std.out = w
}

// SetColorize enables/disables colorized log output by level
func SetColorize(v bool) {
	std.colorize = v
}

// Loggable calls Loggable on the standard logger
func Loggable(level Level) bool {
	return std.Loggable(level)
}

// Fatal calls Output to print to the standard logger.
func Fatal(v ...interface{}) {
	std.Fatal(v...)
}

// Fatalf calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Printf.
func Fatalf(format string, v ...interface{}) {
	std.Fatalf(format, v...)
}

// Error calls Output to print to the standard logger.
func Error(v ...interface{}) {
	std.Error(v...)
}

// Errorf calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Printf.
func Errorf(format string, v ...interface{}) {
	std.Errorf(format, v...)
}

// Warning calls Output to print to the standard logger.
func Warning(v ...interface{}) {
	std.Warning(v...)
}

// Warningf calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Printf.
func Warningf(format string, v ...interface{}) {
	std.Warningf(format, v...)
}

// Info calls Output to print to the standard logger.
func Info(v ...interface{}) {
	std.Info(v...)
}

// Infof calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Printf.
func Infof(format string, v ...interface{}) {
	std.Infof(format, v...)
}

// Debug calls Output to print to the standard logger.
func Debug(v ...interface{}) {
	std.Debug(v...)
}

// Debugf calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Printf.
func Debugf(format string, v ...interface{}) {
	std.Debugf(format, v...)
}

// Trace calls Output to print to the standard logger.
func Trace(v ...interface{}) {
	std.Trace(v...)
}

// Tracef calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Printf.
func Tracef(format string, v ...interface{}) {
	std.Tracef(format, v...)
}

// Output writes the output for a logging event. The string s contains
// the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not
// already a newline. Calldepth is the count of the number of
// frames to skip when computing the file name and line number
// if Llongfile or Lshortfile is set; a value of 1 will print the details
// for the caller of Output.
func Output(calldepth int, level, s string) error {
	return std.Output(calldepth+1, level, s) // +1 for this frame.
}
