{
  "blocks": {},
  "applications": [
    {
      "name": "Apply Web Application",
      "bearer": {
        "source": "file",
        "name": "APPL_TOKEN",
        "value": "APPL_TOKEN_VALUE"
      }
    },
    {
      "name": "Caddy Web Server",
      "bearer": {
        "source": "file",
        "name": "CADDY_TOKEN",
        "value": "CADDY_TOKEN_VALUE"
      }
    },
    {
      "name": "Log Concatenation Command Line",
      "bearer": {
        "source": "file",
        "name": "LCAT_TOKEN",
        "value": "LCAT_TOKEN_VALUE"
      }
    },
    {
      "name": "Management Console Web Application",
      "bearer": {
        "source": "file",
        "name": "MGT_TOKEN",
        "value": "MGT_TOKEN_VALUE"
      }
    },
    {
      "name": "Signon Web Application",
      "bearer": {
        "source": "file",
        "name": "SIGN_TOKEN",
        "value": "SIGN_TOKEN_VALUE"
      }
    }
  ],
  "tenants": [
    {
      "name": "Alberta Post-Secondary Application Service",
      "short": "APAS",
      "guid": "F2515B22-3D36-487C-B58D-8B04A1805562",
      "bearer": {
        "source": "file",
        "name": "APAS_API_TOKEN",
        "value": "APAS_API_TOKEN_VALUE"
      }
    },
    {
      "name": "EducationPlannerBC",
      "short": "EPBC",
      "guid": "EPBC",
      "publicKey": {
        "source": "file",
        "value": "-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA4bhL6rqH6H5k62gut0Zo\n9SKsWRxD4gdDYraKX19tRNzOdX5I/yw3qFyJmS8S8WGpgy5uwp2XzUSPV5T1pMVR\naI9SRfhK+wdmmVTBqpf/t/LoCHRxFjW5xAR098tCMJeCMd7UFoqstKhW94CyWBcK\nVVjbLvNinxx5LVklG515AQ5QbpWUka4+L4q93tV8tY9mn9+vH8p+cN/Hs0GwCB0g\nyFkkvgGxO27j+xZpcLheRSx0W0aev9oHxDRlqCil0wBrmJG19E4RZv8/9bhMknl8\nYsfNIGXKU/+K/fvzD0aV0G0zTWBgyg+/KJlvNeMii/v9Ho4naj01mD5dIEsyAiYg\nrVmTec6zhQlEviR6y2VLHO646PAKXcE+xPlqHoCooXgW8bEtMIuQ5lLAGTNIUF6m\nfauhknqbwPTDPZDvoBo+xsRV3mSh+6rCg7YfNHGMz4KSkHGRw3z72jGg3GW9+OwP\nkNQCRTonWmx3HO9nxwwWUDeDIXr/G4FF1Kvjv/MAAHQ4ttUwvGr2FiqLQg7uIJlM\nd4gYpX/PhMsEERoxmyPSWFnEZV6VeovcgOrgl8htpglp1cdVhEHxOEbFv637UOdK\nVXvRQ4CVCGbxQXAfW2PvhMz0tfUfTdNcqOr+gy8i4ic8tZJdOdrv3ZZhGdNWCoyt\nxyOhLdjgHIAjJVH9t+eIiMECAwEAAQ==\n-----END PUBLIC KEY-----"
      },
      "bearer": {
        "source": "file",
        "name": "EPBC_API_TOKEN",
        "value": "EPBC_API_TOKEN_VALUE",
        "root": true
      }
    },
    {
      "name": "Selkirk College",
      "short": "SELKIRK",
      "guid": "732C29EA-3F8F-4000-9EA8-88FC296AF049",
      "bearer": {
        "source": "file",
        "name": "SELKIRK_API_TOKEN",
        "value": "SELKIRK_API_TOKEN_VALUE"
      }
    },
    {
      "name": "Simon Fraser University",
      "short": "SFU",
      "guid": "155B49CF-5B64-4A39-A197-643A6A0762E0",
      "bearer": {
        "source": "file",
        "name": "SFU_API_TOKEN",
        "value": "SFU_API_TOKEN_VALUE"
      }
    },
    {
      "name": "Spuzzum Institute of Technology",
      "short": "SPUZZUM",
      "guid": "2D03D677-6D64-4F36-B098-9CA487E3B6EA",
      "publicKey": {
        "source": "file",
        "value": "-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAtsidzBMKZlEUHG8jB4IY\n8GMsh5747Kq/LivjFINFmigPvUfsvKs0RFmrYAIcvwiD7pl+aYdSky3neHMq6arv\niE7VCVVL+xRrdPospbUpz8ooog+yTCHX/lkWXr9p3lsILdfgx98b6baUwoduvtiB\nRc+OKjXAc3/w/1DS3n0Nv3wcMs0+a1hMnytx09YU4vmGMzcpX9577OUFMAY6NtAa\nKDilqf1rNNK1mMtmLiZcqHRpCaVFQrBLZm25siQfIEX+CQQj11cC6Q7PD5qaB7r1\nU5IBgrgf8qSsuHSN9bjkwcZvIMBsFN0d8U/TCJwU6lAftlWxNNmBGPgpD1dryhBx\ncvDfw1Z8Ftcjqzy5RMFwW5LKPV0umSP67vVlyklY/A2ojHwWkeVWadxffek0qxFW\nDto38kqxYERcmnP2MYo7BoxzjGdz+wimkfk+nqPiFiyOEFlUOGw+m9/c4kJ9Uo+m\nUzUUIFJ/YtRfJ/5kzySo8El1mgQx3+e49yV4YfzTPUr6RZuPi8ZuwDvbIaPeJQjZ\nWRud6RSRSO/gUBCRLGKUPyA2Pq+Xjv6fY6VJaDFsYXd6lQ6j7QyHAqhUYC2uzs9h\nfyA/urKZIVaACJ/3Wgr1sTo8wH2/3qF1O/xSaWol5aZLzqumLqN28PF/mfn1lljE\nsXAWaVa4CRR3UUl/DKW1a2kCAwEAAQ==\n-----END PUBLIC KEY-----"
      },
      "bearer": {
        "source": "file",
        "name": "SPUZZUM_API_TOKEN",
        "value": "SPUZZUM_API_TOKEN_VALUE"
      }
    },
    {
      "name": "University of British Columbia",
      "short": "UBC",
      "guid": "539E2475-0215-44C3-A4D0-EA806CF9AB9F",
      "bearer": {
        "source": "file",
        "name": "UBC_API_TOKEN",
        "value": "UBC_API_TOKEN_VALUE"
      }
    },
    {
      "name": "University of Victoria",
      "short": "UVIC",
      "guid": "196EE363-A5A3-4C47-8FDB-2E8DA8DBE2E9",
      "bearer": {
        "source": "file",
        "name": "UVIC_API_TOKEN",
        "value": "UVIC_API_TOKEN_VALUE"
      }
    }
  ],
  "authorization": {
    "overrides": {},
    "hostGroups": [
      {
        "name": "No Auth Application Hosts",
        "hosts": [
          "dev-apply.educationplannerbc.ca",
          "dev-apply-admin.educationplannerbc.ca",
          "dev-mc.educationplannerbc.ca",
          "dev-signon.educationplannerbc.ca",
          "dev-admin.educationplannerbc.ca",
          "dev-vault.educationplannerbc.ca",
          "dev-auth-private.educationplannerbc.ca",
          "engineering.educationplannerbc.ca",
          "horsefly.educationplannerbc.ca",
          "skookumchuck.educationplannerbc.ca",
          "spuzzum.educationplannerbc.ca",
          "dev-selftest.educationplannerbc.ca",
          "dev-horsefly.educationplannerbc.ca",
          "dev-skookumchuck.educationplannerbc.ca",
          "dev-spuzzum.educationplannerbc.ca",
          "dev-grafana.educationplannerbc.ca"
        ],
        "default": "allow"
      },
      {
        "name": "API Hosts",
        "hosts": [
          "dev-api.educationplannerbc.ca",
          "dev-api-private.educationplannerbc.ca"
        ],
        "default": "deny",
        "checks": [
          {
            "name": "connector3-transcripts-api",
            "base": "",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/transcripts",
                "rules": {
                  "GET": {
                    "description": "get transcript batch allowed for MoE, SFU, UBC; EPBCIDs are defined in CONNECTOR3_CLIENT_TOKEN_NAME in the fw-generate.sh script",
                    "expression": "bearer('ROOT_TOKEN','853130B7-9DB7-4ABB-BD05-D45D4F468799','155B49CF-5B64-4A39-A197-643A6A0762E0','539E2475-0215-44C3-A4D0-EA806CF9AB9F')"
                  },
                  "POST": {
                    "description": "get transcript batch allowed for MoE, SFU, UBC; EPBCIDs are defined in CONNECTOR3_CLIENT_TOKEN_NAME in the fw-generate.sh script",
                    "expression": "bearer('ROOT_TOKEN','853130B7-9DB7-4ABB-BD05-D45D4F468799','155B49CF-5B64-4A39-A197-643A6A0762E0','539E2475-0215-44C3-A4D0-EA806CF9AB9F')"
                  }
                }
              },
              {
                "path": "/transcripts/:batchID",
                "rules": {
                  "GET": {
                    "description": "get transcript batch allowed for MoE, SFU, UBC; EPBCIDs are defined in CONNECTOR3_CLIENT_TOKEN_NAME in the fw-generate.sh script",
                    "expression": "bearer('ROOT_TOKEN','853130B7-9DB7-4ABB-BD05-D45D4F468799','155B49CF-5B64-4A39-A197-643A6A0762E0','539E2475-0215-44C3-A4D0-EA806CF9AB9F')"
                  },
                  "POST": {
                    "description": "get transcript batch allowed for MoE, SFU, UBC; EPBCIDs are defined in CONNECTOR3_CLIENT_TOKEN_NAME in the fw-generate.sh script",
                    "expression": "bearer('ROOT_TOKEN','853130B7-9DB7-4ABB-BD05-D45D4F468799','155B49CF-5B64-4A39-A197-643A6A0762E0','539E2475-0215-44C3-A4D0-EA806CF9AB9F')"
                  }
                }
              }
            ]
          }
        ]
      },
      {
        "name": "APIs Hosts",
        "hosts": [
          "dev-apis.educationplannerbc.ca",
          "dev-apis-private.educationplannerbc.ca"
        ],
        "default": "deny",
        "checks": [
          {
            "name": "applications-api",
            "base": "/applications-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/virus-scan",
                "rules": {
                  "GET": {
                    "description": "get API virus scanner state",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/virus-scan/:state",
                "rules": {
                  "PUT": {
                    "description": "set API virus scanner state",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/files/:guid",
                "rules": {
                  "GET": {
                    "description": "get an application file attachment with EPBC ROOT bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "delete an application file attachment with EPBC ROOT bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/application-counts",
                "rules": {
                  "GET": {
                    "description": "get application counts with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/applications",
                "rules": {
                  "GET": {
                    "description": "get applications with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/applications/:guid",
                "rules": {
                  "GET": {
                    "description": "get application details with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/export",
                "rules": {
                  "POST": {
                    "description": "export applications CSV file with ROOT bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/export-fields",
                "rules": {
                  "GET": {
                    "description": "get export-fields with root or Management Console bearer token",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/application-counts",
                "rules": {
                  "GET": {
                    "description": "get institution application-counts for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications",
                "rules": {
                  "GET": {
                    "description": "get institution applications for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:refNum",
                "rules": {
                  "GET": {
                    "description": "get application details for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/checkIntake",
                "rules": {
                  "GET": {
                    "description": "check application intake for tenantID with root bearer tokens or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum",
                "rules": {
                  "GET": {
                    "description": "get application by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/answers",
                "rules": {
                  "GET": {
                    "description": "get application answers by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "DELETE": {
                    "description": "delete application answers by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/answers/:guid",
                "rules": {
                  "GET": {
                    "description": "get application answer by application number and question GUID for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "PUT": {
                    "description": "save application answer by application number and question GUID for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/fees",
                "rules": {
                  "GET": {
                    "description": "get assessed application fees by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/files",
                "rules": {
                  "GET": {
                    "description": "get applications files by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "POST": {
                    "description": "save an  application file by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/files/:guid",
                "rules": {
                  "DELETE": {
                    "description": "delete an application files by application number and file GUID for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/programofferings",
                "rules": {
                  "GET": {
                    "description": "get the program offerings of an application with root or Apply applicationbearer token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "PUT": {
                    "description": "save the program offerings of an application with root or Apply applicationbearer token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/programs/:priority/references",
                "rules": {
                  "GET": {
                    "description": "get references entered for a program with root or Apply applicationbearer token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "POST": {
                    "description": "save references entered for a program with root or Apply applicationbearer token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/resend",
                "rules": {
                  "PUT": {
                    "description": "resend application with root or tenant bearer token or ROOT or ADM READ role in Management Console",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/contexts/:appNum",
                "rules": {
                  "GET": {
                    "description": "get application context by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/export",
                "rules": {
                  "POST": {
                    "description": "export applications CSV file with ROOT bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/users/:userGUID/applications",
                "rules": {
                  "GET": {
                    "description": "get user applications with ROOT bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/users/:userGUID/applications/:guid",
                "rules": {
                  "GET": {
                    "description": "get user application by guid with ROOT bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "PUT": {
                    "description": "put user application by guid with ROOT bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "DELETE": {
                    "description": "delete user application by guid with ROOT bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/users/:userGUID/applications/:guid/reset",
                "rules": {
                  "PUT": {
                    "description": "reset user application by guid with ROOT bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/process-steps",
                "rules": {
                  "GET": {
                    "description": "get application process steps",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/users/:userGUID/applications",
                "rules": {
                  "GET": {
                    "description": "get users applications with root bearer tokens or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/users/:userGUID/applications/:guid",
                "rules": {
                  "GET": {
                    "description": "get users applications by guid with root bearer tokens or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "PUT": {
                    "description": "put users applications by guid with root bearer tokens or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "DELETE": {
                    "description": "delete users applications by guid with root bearer tokens or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/users/:userGUID/applications/:guid/resend-email",
                "rules": {
                  "PUT": {
                    "description": "resend email for a given application with root bearer tokens or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:userGUID/applications/:guid/reset",
                "rules": {
                  "PUT": {
                    "description": "reset user applications by guid with root bearer tokens or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/users/:userGUID/applications/:guid/validate",
                "rules": {
                  "GET": {
                    "description": "validate user applications by guid with root bearer tokens or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/users/:userGUID/institutions/:tenantID/applications",
                "rules": {
                  "POST": {
                    "description": "post user applications by institution id with root bearer tokens or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              }
            ]
          },
          {
            "name": "applications-api v2",
            "base": "/applications-api/v2",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/virus-scan",
                "rules": {
                  "GET": {
                    "description": "get API virus scanner state",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/virus-scan/:state",
                "rules": {
                  "PUT": {
                    "description": "set API virus scanner state",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/files/:guid",
                "rules": {
                  "GET": {
                    "description": "get an application file attachment with EPBC ROOT bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "delete an application file attachment with EPBC ROOT bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/application",
                "rules": {
                  "GET": {
                    "description": "BAD: get applications with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PUT": {
                    "description": "BAD: update applications with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "BAD: delete applications with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "POST": {
                    "description": "BAD: create applications with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/email",
                "rules": {
                  "PUT": {
                    "description": "BAD: resend email receipt with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/validate",
                "rules": {
                  "GET": {
                    "description": "BAD: validate applications with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/applications",
                "rules": {
                  "GET": {
                    "description": "get applications with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/applications/:identifier",
                "rules": {
                  "GET": {
                    "description": "get application details with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "delete an application with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/applications/:guid/email",
                "rules": {
                  "PUT": {
                    "description": "resend application email receipt with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications",
                "rules": {
                  "GET": {
                    "description": "get applications for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "POST": {
                    "description": "create an application to tenantID with root bearer token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:identifier",
                "rules": {
                  "GET": {
                    "description": "get an application detail for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "PUT": {
                    "description": "update an application to tenantID with root bearer token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "DELETE": {
                    "description": "delete an application to tenantID with root bearer token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/checkIntake",
                "rules": {
                  "GET": {
                    "description": "check application intake for tenantID with root bearer tokens or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum",
                "rules": {
                  "GET": {
                    "description": "get application by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/answers",
                "rules": {
                  "GET": {
                    "description": "get application answers by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "DELETE": {
                    "description": "delete application answers by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/answers/:guid",
                "rules": {
                  "GET": {
                    "description": "get application answer by application number and question GUID for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "PUT": {
                    "description": "save application answer by application number and question GUID for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/fees",
                "rules": {
                  "GET": {
                    "description": "get assessed application fees by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/files",
                "rules": {
                  "GET": {
                    "description": "get applications files by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "POST": {
                    "description": "save an  application file by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/files/:guid",
                "rules": {
                  "DELETE": {
                    "description": "delete an application files by application number and file GUID for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/programofferings",
                "rules": {
                  "GET": {
                    "description": "get the program offerings of an application with root or Apply applicationbearer token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "PUT": {
                    "description": "save the program offerings of an application with root or Apply applicationbearer token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/programs/:priority/references",
                "rules": {
                  "GET": {
                    "description": "get references entered for a program with root or Apply applicationbearer token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "POST": {
                    "description": "save references entered for a program with root or Apply applicationbearer token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/resend",
                "rules": {
                  "PUT": {
                    "description": "resend application with root or tenant bearer token or ROOT or ADM READ role in Management Console",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/contexts/:appNum",
                "rules": {
                  "GET": {
                    "description": "get application context by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              }
            ]
          },
          {
            "name": "applications-svc",
            "base": "/applications-svc/v1",
            "paths": [
              {
                "path": "/",
                "rules": {
                  "GET": {
                    "description": "list API endpoints for service",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/swagger-static/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:epbcID/applications/:appNum/sendapplication",
                "rules": {
                  "POST": {
                    "description": "send application requires ROOT privilege",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:epbcID/applications/:appNum/sendemail",
                "rules": {
                  "POST": {
                    "description": "sendemail requires ROOT privilege",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:epbcID/applications/:appNum/createpdf",
                "rules": {
                  "POST": {
                    "description": "send createpdf requires ROOT privilege",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:epbcID/applications/:appNum/createdocument",
                "rules": {
                  "POST": {
                    "description": "createdocument requires ROOT privilege",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:epbcID/applications/:appNum/publishsubmitted",
                "rules": {
                  "POST": {
                    "description": "publishsubmitted requires ROOT privilege",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:epbcID/applications/:appNum/finalizerules",
                "rules": {
                  "POST": {
                    "description": "finalizerules requires ROOT privilege",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:epbcID/applications/:appNum/logapp",
                "rules": {
                  "POST": {
                    "description": "logapp requires ROOT privilege",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/refresh",
                "rules": {
                  "GET": {
                    "description": "refresh requires ROOT privilege",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/batch",
                "rules": {
                  "POST": {
                    "description": "POST batch ",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "auth-api",
            "base": "/auth-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/login",
                "rules": {
                  "POST": {
                    "description": "user/password login is public",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/logout",
                "rules": {
                  "POST": {
                    "description": "user logout is public",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/claims",
                "rules": {
                  "GET": {
                    "description": "get claims is public",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/refreshtoken",
                "rules": {
                  "POST": {
                    "description": "user logout is public",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN','MGT_TOKEN','SIGN_TOKEN')"
                  }
                }
              },
              {
                "path": "/actions",
                "rules": {
                  "GET": {
                    "description": "GET actions",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              },
              {
                "path": "/categories",
                "rules": {
                  "GET": {
                    "description": "GET categories",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              },
              {
                "path": "/categories/:name",
                "rules": {
                  "GET": {
                    "description": "GET category by name",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              },
              {
                "path": "/roles",
                "rules": {
                  "GET": {
                    "description": "GET roles",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              },
              {
                "path": "/roles/:guid",
                "rules": {
                  "GET": {
                    "description": "get role by GUID",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              },
              {
                "path": "/invitations",
                "rules": {
                  "GET": {
                    "description": "get invitations",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN','SIGN_TOKEN')"
                  },
                  "POST": {
                    "description": "create invitation",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN','MGT_TOKEN','SIGN_TOKEN')"
                  },
                  "PUT": {
                    "description": "resend invitation",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN','MGT_TOKEN','SIGN_TOKEN')"
                  }
                }
              },
              {
                "path": "/invitations/:token",
                "rules": {
                  "GET": {
                    "description": "get invitations by token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN','MGT_TOKEN','SIGN_TOKEN')"
                  },
                  "PUT": {
                    "description": "update invitation",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN','MGT_TOKEN','SIGN_TOKEN')"
                  }
                }
              },
              {
                "path": "/password-reset",
                "rules": {
                  "GET": {
                    "description": "get password reset details",
                    "expression": "bearer('ROOT_TOKEN','SIGN_TOKEN')"
                  },
                  "POST": {
                    "description": "initiate password reset",
                    "expression": "bearer('ROOT_TOKEN','SIGN_TOKEN')"
                  }
                }
              },
              {
                "path": "/users",
                "rules": {
                  "GET": {
                    "description": "get users",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN','MGT_TOKEN','SIGN_TOKEN')"
                  },
                  "POST": {
                    "description": "create user",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN','MGT_TOKEN','SIGN_TOKEN')"
                  }
                }
              },
              {
                "path": "/users/:guid",
                "rules": {
                  "GET": {
                    "description": "get user by GUID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN','SIGN_TOKEN') || (bearer('MGT_TOKEN') && (root() || user(param(':guid'))))"
                  },
                  "PUT": {
                    "description": "update user by GUID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "delete user by GUID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/password",
                "rules": {
                  "PUT": {
                    "description": "change user password by GUID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN','SIGN_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/roles",
                "rules": {
                  "GET": {
                    "description": "get roles granted to a user",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN','SIGN_TOKEN')"
                  }
                }
              },
              {
                "path": "/users/:guid/roles/:roleguid",
                "rules": {
                  "PUT": {
                    "description": "grant role to a user",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN','SIGN_TOKEN')"
                  },
                  "DELETE": {
                    "description": "revoke role from a user",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN','SIGN_TOKEN')"
                  }
                }
              },
              {
                "path": "/users/:guid/username/:emailGUID",
                "rules": {
                  "PATCH": {
                    "description": "patch a user email address by its GUID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/roles",
                "rules": {
                  "GET": {
                    "description": "get roles defined by a tenant",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','READ')))"
                  },
                  "POST": {
                    "description": "create role for a tenant",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/roles/:roleguid",
                "rules": {
                  "GET": {
                    "description": "get tenant role by GUID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','READ')))"
                  },
                  "PUT": {
                    "description": "update tenant role by GUID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete tenant role by GUID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/users",
                "rules": {
                  "GET": {
                    "description": "get tenant users",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/users/:guid",
                "rules": {
                  "GET": {
                    "description": "get a tenant user",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','READ')))"
                  },
                  "PUT": {
                    "description": "add a tenant user",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "remove a tenant user",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/users/:guid/roles",
                "rules": {
                  "GET": {
                    "description": "get tenant assigned user roles",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','READ')))"
                  },
                  "PUT": {
                    "description": "assign tenant role to a user",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "remove tenant role from a user",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/roles/:guid/users",
                "rules": {
                  "GET": {
                    "description": "get users that are assigned a given tenant role",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/roles/:guid/users/:userguid",
                "rules": {
                  "PUT": {
                    "description": "assign a tenant role to a user",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "remove a tenant role from a user",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/roles/:guid/permissions/:categorycode/:actioncode",
                "rules": {
                  "POST": {
                    "description": "create an action on a category for a tenant role",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','CREATE')))"
                  },
                  "DELETE": {
                    "description": "remove an action on a category from a tenant role",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'AUTH','DELETE')))"
                  }
                }
              },
              {
                "path": "/statuses",
                "rules": {
                  "GET": {
                    "description": "get user account statuses",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "campuses-api",
            "base": "/campuses-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/v1/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/address-types",
                "rules": {
                  "GET": {
                    "description": "get address types",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/campustypes",
                "rules": {
                  "GET": {
                    "description": "get campus types",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "POST": {
                    "description": "post campus types",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/campustypes/:guid",
                "rules": {
                  "GET": {
                    "description": "put campus types",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PUT": {
                    "description": "put campus types",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "delete campus types",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:epbcID/campuses",
                "rules": {
                  "GET": {
                    "description": "get institutions campuses",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "POST": {
                    "description": "post institutions campuses",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:epbcID/campuses/:guid",
                "rules": {
                  "GET": {
                    "description": "get institutions campuses by guid",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PUT": {
                    "description": "put institutions campuses by guid",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "delete institutions campuses by guid",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              }
            ]
          },
          {
            "name": "cleanup-api",
            "base": "/cleanup-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/specifictestaccounts",
                "rules": {
                  "DELETE": {
                    "description": "delete specific test data with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/accountsbypattern",
                "rules": {
                  "DELETE": {
                    "description": "delete test data by pattern with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/automatedtestdata",
                "rules": {
                  "DELETE": {
                    "description": "delete automated test data with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/testinstitutions",
                "rules": {
                  "DELETE": {
                    "description": "delete insitutions test data with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID",
                "rules": {
                  "DELETE": {
                    "description": "delete specific insitution test data with root bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && root())"
                  }
                }
              }
            ]
          },
          {
            "name": "connector3-transcripts-api",
            "base": "/connector3-transcripts-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/swagger-static/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "courier-svc",
            "base": "/courier-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "curriculum-api",
            "base": "/curriculum-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/academic-credentials",
                "rules": {
                  "GET": {
                    "description": "academic-credentials are public",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/curriculums",
                "rules": {
                  "GET": {
                    "description": "curriculums (sic) are public",
                    "expression": "true"
                  },
                  "POST": {
                    "description": "adding curricula requires ROOT",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/curriculums/:curricCode",
                "rules": {
                  "GET": {
                    "description": "curriculums (sic) are public",
                    "expression": "true"
                  },
                  "PUT": {
                    "description": "updating curricula requires ROOT",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/curriculums/:curricCode/courses",
                "rules": {
                  "GET": {
                    "description": "curriculum courses are public",
                    "expression": "true"
                  },
                  "POST": {
                    "description": "creating curriculum courses requires ROOT",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/curriculums/:curricCode/courses/:courseCode",
                "rules": {
                  "GET": {
                    "description": "curriculum courses are public",
                    "expression": "true"
                  },
                  "PUT": {
                    "description": "updating curriculum courses requires ROOT",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "deleting curriculum courses requires ROOT",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              }
            ]
          },
          {
            "name": "deployment-api",
            "base": "/deployment-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/deployments",
                "rules": {
                  "GET": {
                    "description": "list of deployments in Docker Swarm with ROOT bearer token",
                    "expression": "bearer('ROOT_TOKEN')"
                  },
                  "POST": {
                    "description": "deploy an image and tag into Docker Swarm with ROOT bearer token",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/deployments/:service",
                "rules": {
                  "GET": {
                    "description": "get a deployment identified by service in Docker Swarm with ROOT bearer token",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/migrate/:schema/:action",
                "rules": {
                  "POST": {
                    "description": "root can execute migrate actions",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/secrets",
                "rules": {
                  "GET": {
                    "description": "get the list of secrets in Docker Swarm with ROOT bearer token",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "POST": {
                    "description": "create a new secret in Docker Swarm with ROOT bearer token",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/secrets/:name",
                "rules": {
                  "GET": {
                    "description": "get a secret by name",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PUT": {
                    "description": "update a secret by name",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "delete a secret by name",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/stacks",
                "rules": {
                  "GET": {
                    "description": "get the list of stacks in Docker Swarm with ROOT bearer token",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stacks/:stack/deployments",
                "rules": {
                  "GET": {
                    "description": "get the deployments for a given stack",
                    "expression": "bearer('ROOT_TOKEN')"
                  },
                  "POST": {
                    "description": "deploy an image and tag into a given stack",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stacks/:stack/releases",
                "rules": {
                  "GET": {
                    "description": "get the list of releases for a given stack",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stacks/:stack/releases/:release",
                "rules": {
                  "GET": {
                    "description": "get a given release manifest for a given stack",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "documents-api",
            "base": "/documents-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/deliveries",
                "rules": {
                  "GET": {
                    "description": "get delivery documents",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/documents",
                "rules": {
                  "GET": {
                    "description": "get documents",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/documents/:docID",
                "rules": {
                  "GET": {
                    "description": "get document summary by documentID",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/documents/:docID/contents",
                "rules": {
                  "GET": {
                    "description": "get document contents by documentID",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/deliveries",
                "rules": {
                  "GET": {
                    "description": "get tenant delivery documents",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ANY','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/documents",
                "rules": {
                  "GET": {
                    "description": "get tenant documents",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ANY','READ')))"
                  },
                  "POST": {
                    "description": "save document",
                    "expression": "bearer('ROOT_TOKEN') || (bearer(param(':tenantID')) && signature(param(':tenantID')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/documents/:docID",
                "rules": {
                  "GET": {
                    "description": "get tenant document by documentID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ANY','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/documents/:docID/contents",
                "rules": {
                  "GET": {
                    "description": "get tenant document contents by documentID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ANY','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/documents/:docID/resend",
                "rules": {
                  "PUT": {
                    "description": "resend document with root or tenant bearer token or ROOT or ADM READ role in Management Console",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/statuses",
                "rules": {
                  "GET": {
                    "description": "get document statues",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              },
              {
                "path": "/terminals",
                "rules": {
                  "GET": {
                    "description": "get institution source/destination terminals",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              },
              {
                "path": "/types",
                "rules": {
                  "GET": {
                    "description": "get document types",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "docs-api",
            "base": "/docs-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/deliveries",
                "rules": {
                  "GET": {
                    "description": "get delivery documents",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/documents",
                "rules": {
                  "GET": {
                    "description": "get documents",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/documents/:docID",
                "rules": {
                  "GET": {
                    "description": "get document summary by documentID",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/documents/:docID/contents",
                "rules": {
                  "GET": {
                    "description": "get document contents by documentID",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/deliveries",
                "rules": {
                  "GET": {
                    "description": "get tenant delivery documents",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ANY','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/documents",
                "rules": {
                  "GET": {
                    "description": "get tenant documents",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ANY','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/documents/:docID",
                "rules": {
                  "GET": {
                    "description": "get tenant document by documentID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ANY','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/documents/:docID/contents",
                "rules": {
                  "GET": {
                    "description": "get tenant document contents by documentID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ANY','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/documents/:docID/resend",
                "rules": {
                  "PUT": {
                    "description": "resend document with root or tenant bearer token or ROOT or ADM READ role in Management Console",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/statuses",
                "rules": {
                  "GET": {
                    "description": "get document statues",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              },
              {
                "path": "/terminals",
                "rules": {
                  "GET": {
                    "description": "get institution source/destination terminals",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              },
              {
                "path": "/types",
                "rules": {
                  "GET": {
                    "description": "get document types",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "email-api",
            "base": "/email-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/swagger-static/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/",
                "rules": {
                  "GET": {
                    "description": "get email",
                    "expression": "bearer('ROOT_TOKEN')"
                  },
                  "POST": {
                    "description": "create email",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "events-svc",
            "base": "/events-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/records",
                "rules": {
                  "GET": {
                    "description": "get records with optional filter parameters",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "fees-api",
            "base": "/fees-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/categories",
                "rules": {
                  "GET": {
                    "description": "get fee categories",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/fees",
                "rules": {
                  "GET": {
                    "description": "get institution fees",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'FEE','READ')))"
                  },
                  "POST": {
                    "description": "create institution fee",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'FEE','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/fees/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution fee by GUID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'FEE','READ')))"
                  },
                  "PUT": {
                    "description": "update institution fee by GUID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'FEE','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution fee by GUID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'FEE','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/fees/:guid/feeSchedules",
                "rules": {
                  "GET": {
                    "description": "get institution fee schedules by GUID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'FEE','READ')))"
                  },
                  "PUT": {
                    "description": "update institution fee schedules by GUID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'FEE','UPDATE')))"
                  }
                }
              }
            ]
          },
          {
            "name": "institutions-api",
            "base": "/institutions-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/cache/reload/:epbcID",
                "rules": {
                  "PUT": {
                    "description": "institution cache reload requires root",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/address-types",
                "rules": {
                  "GET": {
                    "description": "get address types",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/countries",
                "rules": {
                  "GET": {
                    "description": "get countries",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/countries/:code",
                "rules": {
                  "GET": {
                    "description": "get country by ISO 2 character country code",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/countries/:code/institutions/:type",
                "rules": {
                  "GET": {
                    "description": "get country institutions by type",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/countries/:code/regions",
                "rules": {
                  "GET": {
                    "description": "get country regions by ISO 2 character country code",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/countries/:code/regions/:regionCode",
                "rules": {
                  "GET": {
                    "description": "get country region by ISO 2 character country code, region code",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/countries/:code/regions/:regionCode/institutions/:type",
                "rules": {
                  "GET": {
                    "description": "get region institutions by type",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/identifier-types",
                "rules": {
                  "GET": {
                    "description": "get identifier types",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/institution-types",
                "rules": {
                  "GET": {
                    "description": "get institution types",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/institutions",
                "rules": {
                  "GET": {
                    "description": "get institutions",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN','MGT_TOKEN') || param('summary') == 'yes'"
                  },
                  "POST": {
                    "description": "create an institution",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID",
                "rules": {
                  "GET": {
                    "description": "get an institution by tenant ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || param('summary') == 'yes' || (bearer('MGT_TOKEN') && (root() || role('EPBC','INST','READ') || role(param(':tenantID'),'INST','READ')))"
                  },
                  "PUT": {
                    "description": "update an institution by tenant ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || param('summary') == 'yes' || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/addresses",
                "rules": {
                  "GET": {
                    "description": "get institution addresses",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role('EPBC','INST','READ') || role(param(':tenantID'),'ADDR','READ')))"
                  },
                  "POST": {
                    "description": "create an institution address",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADDR','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/addresses/:guid",
                "rules": {
                  "GET": {
                    "description": "get an institution address",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role('EPBC','INST','READ') || role(param(':tenantID'),'ADDR','READ')))"
                  },
                  "PUT": {
                    "description": "update an institution address",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADDR','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete an institution address",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADDR','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:epbcID/assigned/configs",
                "rules": {
                  "GET": {
                    "description": "get all configs assigned to an institution",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/custom/configs",
                "rules": {
                  "GET": {
                    "description": "get all custom configs assigned by an institution",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/custom/configs/:otherEPBCID",
                "rules": {
                  "GET": {
                    "description": "get the custom configs assigned by atenant to another institution",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/custom/configs/:otherEPBCID/:code",
                "rules": {
                  "PUT": {
                    "description": "a tenant may assign a custom config code to another institution",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "a tenant may remove an assigned config code from another institution",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/EPBC/custom/properties",
                "rules": {
                  "GET": {
                    "description": "get available EPBC institution-assignable properties",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/custom/properties",
                "rules": {
                  "GET": {
                    "description": "get available tenant institution-assignable properties",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','READ')))"
                  },
                  "POST": {
                    "description": "create a tenant institution-assignable property",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/custom/properties/:code",
                "rules": {
                  "DELETE": {
                    "description": "delete an institution-assignable property",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/identifiers",
                "rules": {
                  "GET": {
                    "description": "get an institution's identifiers",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/identifiers/:code",
                "rules": {
                  "GET": {
                    "description": "get an institution's identifier by identifier type code",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','READ')))"
                  },
                  "DELETE": {
                    "description": "delete an institution's identifier by identifier type code",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/identifiers/:code/:value",
                "rules": {
                  "PUT": {
                    "description": "update an institution's identifier by identifier type code",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/info",
                "rules": {
                  "GET": {
                    "description": "get institution info from the institution remote server",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/intakes",
                "rules": {
                  "GET": {
                    "description": "get institution intakes",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role('EPBC','INST','READ') || role(param(':tenantID'),'INST','READ')))"
                  },
                  "POST": {
                    "description": "create an institution intake",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role('EPBC','INST','CREATE') || role(param(':tenantID'),'INST','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/intakes/:guid",
                "rules": {
                  "GET": {
                    "description": "get an institution intake",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role('EPBC','INST','READ') || role(param(':tenantID'),'INST','READ')))"
                  },
                  "PUT": {
                    "description": "update an institution intake",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role('EPBC','INST','UPDATE') || role(param(':tenantID'),'INST','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete an institution intake",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/names",
                "rules": {
                  "GET": {
                    "description": "get an institution's names for all types",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/names/:code",
                "rules": {
                  "GET": {
                    "description": "get an institution's names by type code",
                    "expression": "true"
                  },
                  "POST": {
                    "description": "create a new type code name for an institution",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/names/:code/:guid",
                "rules": {
                  "GET": {
                    "description": "get an institution's name by type code and guid",
                    "expression": "true"
                  },
                  "DELETE": {
                    "description": "delete an institution name",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','DELETE')))"
                  },
                  "PUT": {
                    "description": "update an institution name",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/payment-methods",
                "rules": {
                  "GET": {
                    "description": "get accepted institution payment methods",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/payment-methods/:code",
                "rules": {
                  "POST": {
                    "description": "add an accepted institution payment method",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','CREATE')))"
                  },
                  "DELETE": {
                    "description": "remove an accepted institution payment method",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','DELETE')))"
                  }
                }
              },
              {
                "path": "/public-keys",
                "rules": {
                  "GET": {
                    "description": "get all institution public keys",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/public-key",
                "rules": {
                  "GET": {
                    "description": "get institution public key",
                    "expression": "true"
                  },
                  "PUT": {
                    "description": "set institution public key",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','CREATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution ppublic key",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/services",
                "rules": {
                  "GET": {
                    "description": "get institution service types",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/services/:typeCode",
                "rules": {
                  "GET": {
                    "description": "get institution service type by type code",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','READ')))"
                  },
                  "PUT": {
                    "description": "update institution service type by type code",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/services/:typeCode/configs",
                "rules": {
                  "GET": {
                    "description": "get institution service type configs",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/services/:typeCode/configs/:configKey",
                "rules": {
                  "GET": {
                    "description": "get institution service type configs by key",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','READ')))"
                  },
                  "PUT": {
                    "description": "set institution service type configs by key",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/vouchers",
                "rules": {
                  "GET": {
                    "description": "get institution admission vouchers",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','READ')))"
                  },
                  "POST": {
                    "description": "create an institution admission voucher",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/vouchers/:guid",
                "rules": {
                  "GET": {
                    "description": "get an institution admission voucher by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','READ')))"
                  },
                  "PUT": {
                    "description": "update an institution admission voucher by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete an institution admission voucher by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/vouchers/:guid/redeem",
                "rules": {
                  "PUT": {
                    "description": "redeem an institution admission voucher by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/voucher-file",
                "rules": {
                  "POST": {
                    "description": "create an institution admission voucher file",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'INST','CREATE')))"
                  }
                }
              },
              {
                "path": "/name-types",
                "rules": {
                  "GET": {
                    "description": "get institution name types",
                    "expression": "true"
                  },
                  "POST": {
                    "description": "create an institution name type",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/name-types/:code",
                "rules": {
                  "DELETE": {
                    "description": "delete an institution name type",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PUT": {
                    "description": "update an institution name type",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/services",
                "rules": {
                  "GET": {
                    "description": "get services",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/services/:typeCode",
                "rules": {
                  "GET": {
                    "description": "get service by service type code",
                    "expression": "bearer('ROOT_TOKEN')"
                  },
                  "POST": {
                    "description": "create a service type",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/services/:typeCode/configs",
                "rules": {
                  "GET": {
                    "description": "get a service type's configs",
                    "expression": "bearer('ROOT_TOKEN')"
                  },
                  "POST": {
                    "description": "create a service type configs",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/services/:typeCode/configs/:key",
                "rules": {
                  "GET": {
                    "description": "get service type config key details",
                    "expression": "bearer('ROOT_TOKEN')"
                  },
                  "DELETE": {
                    "description": "delete a service type config",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/statuses",
                "rules": {
                  "GET": {
                    "description": "get statuses",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  }
                }
              },
              {
                "path": "/voucher-types",
                "rules": {
                  "GET": {
                    "description": "get voucher types",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              }
            ]
          },
          {
            "name": "listitems-api",
            "base": "/listitems-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/refresh",
                "rules": {
                  "GET": {
                    "description": "get API refresh",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/swagger-static/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/",
                "rules": {
                  "GET": {
                    "description": "get listitems-api root",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/listItem",
                "rules": {
                  "GET": {
                    "description": "get listItem",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "PUT": {
                    "description": "put listItem",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "POST": {
                    "description": "post listItem",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/listItem/countryRegion",
                "rules": {
                  "GET": {
                    "description": "get countryRegion",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/listItem/postSecondary",
                "rules": {
                  "GET": {
                    "description": "get postSecondary",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/listItem/highSchool",
                "rules": {
                  "GET": {
                    "description": "get highSchool",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "mailer-svc",
            "base": "/mailer-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/emails",
                "rules": {
                  "GET": {
                    "description": "get emails",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/email-requests",
                "rules": {
                  "GET": {
                    "description": "get email requests",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "POST": {
                    "description": "post email requests",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/email-requests/:guid",
                "rules": {
                  "GET": {
                    "description": "get email requests by guid",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PATCH": {
                    "description": "patch email requests by guid",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PUT": {
                    "description": "put email requests by guid",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/email-templates",
                "rules": {
                  "GET": {
                    "description": "get email templates",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "POST": {
                    "description": "post email templates",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/email-templates/:guid",
                "rules": {
                  "GET": {
                    "description": "get email templates by guid",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "delete email templates by guid",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PUT": {
                    "description": "put email templates by guid",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/email-requests",
                "rules": {
                  "GET": {
                    "description": "get institutions email requests",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'MAILER','READ')))"
                  },
                  "POST": {
                    "description": "post institutions email requests",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'MAILER','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/email-requests/:guid",
                "rules": {
                  "GET": {
                    "description": "get institutions email requests by guid",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'MAILER','READ')))"
                  },
                  "PUT": {
                    "description": "put institutions email requests by guid",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'MAILER','UPDATE')))"
                  },
                  "PATCH": {
                    "description": "patch institutions email requests by guid",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'MAILER','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/email-templates",
                "rules": {
                  "GET": {
                    "description": "get institutions email templates",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'MAILER','READ')))"
                  },
                  "POST": {
                    "description": "post institutions email templates",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'MAILER','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/email-templates/:guid",
                "rules": {
                  "GET": {
                    "description": "get institutions email templates by guid",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'MAILER','READ')))"
                  },
                  "PUT": {
                    "description": "put institutions email templates by guid",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'MAILER','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institutions email templates by guid",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'MAILER','DELETE')))"
                  }
                }
              }
            ]
          },
          {
            "name": "metrics-svc",
            "base": "/metrics-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "messages-api",
            "base": "/messages-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/declaration-types",
                "rules": {
                  "GET": {
                    "description": "get declaration types with optional query params",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/declarations",
                "rules": {
                  "GET": {
                    "description": "get declarations with optional query params",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN','SIGN_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/declarations/:guid",
                "rules": {
                  "GET": {
                    "description": "get declaration by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN','SIGN_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/templates",
                "rules": {
                  "GET": {
                    "description": "get templates",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/templates/:guid",
                "rules": {
                  "GET": {
                    "description": "get template by guid",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/templates/values",
                "rules": {
                  "GET": {
                    "description": "get templates values for ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "POST": {
                    "description": "create templates values for ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/templates/values/:value",
                "rules": {
                  "PUT": {
                    "description": "update templates values for ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "delete templates values for ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/templates/statuses",
                "rules": {
                  "GET": {
                    "description": "get template statuses",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/declarations",
                "rules": {
                  "GET": {
                    "description": "get declarations for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "POST": {
                    "description": "create declaration with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/declarations/:guid",
                "rules": {
                  "GET": {
                    "description": "get declarations for tenantID by ID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "PUT": {
                    "description": "update declaration with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/templates",
                "rules": {
                  "GET": {
                    "description": "get templates for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "POST": {
                    "description": "create templates with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/templates/:guid",
                "rules": {
                  "GET": {
                    "description": "get templates for tenantID by ID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PUT": {
                    "description": "update templates with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              }
            ]
          },
          {
            "name": "passwordreset-api",
            "base": "/passwordreset-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/",
                "rules": {
                  "GET": {
                    "description": "get root",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "POST": {
                    "description": "create a password reset something or other",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/:token",
                "rules": {
                  "GET": {
                    "description": "get password reset token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "PUT": {
                    "description": "set a password reset token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "payments-api",
            "base": "/payments-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/swagger-static/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/",
                "rules": {
                  "GET": {
                    "description": "get payments-api root",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/batch",
                "rules": {
                  "POST": {
                    "description": "save batch (backend handles it's own auth)",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/updatejsontemplate",
                "rules": {
                  "PUT": {
                    "description": "set update JSON template",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/commit",
                "rules": {
                  "POST": {
                    "description": "commit payment for application (backend handles it's own auth)",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/createdocument",
                "rules": {
                  "POST": {
                    "description": "create document for application (backend handles it's own auth)",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/documentcommit",
                "rules": {
                  "POST": {
                    "description": "(backend handles it's own auth)",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/payment-processing",
                "rules": {
                  "POST": {
                    "description": "allow Apply payment processing",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/transactions",
                "rules": {
                  "GET": {
                    "description": "allow Apply payment processing",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/submit",
                "rules": {
                  "POST": {
                    "description": "submit application (backend handles it's own auth)",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/retry",
                "rules": {
                  "POST": {
                    "description": "retry application submit (backend handles it's own auth)",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/applications/:appNum/submitfromui",
                "rules": {
                  "POST": {
                    "description": "submit from UI (backend handles it's own auth)",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/payment-processing",
                "rules": {
                  "POST": {
                    "description": "do payment processing)",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PAYMENT','READ')))"
                  }
                }
              },
              {
                "path": "/payment-url",
                "rules": {
                  "GET": {
                    "description": "get payment URL",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PAYMENT','READ')))"
                  }
                }
              },
              {
                "path": "/refresh",
                "rules": {
                  "GET": {
                    "description": "refresh (backend handles it's own auth)",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/processlogs",
                "rules": {
                  "GET": {
                    "description": "process logs",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/transactions",
                "rules": {
                  "GET": {
                    "description": "get payments transactions",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PAYMENT','READ')))"
                  },
                  "POST": {
                    "description": "save a payment transaction",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PAYMENT','READ')))"
                  }
                }
              },
              {
                "path": "/transactions/:guid",
                "rules": {
                  "GET": {
                    "description": "get a payment transaction by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PAYMENT','READ')))"
                  },
                  "PUT": {
                    "description": "update a payment transaction by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PAYMENT','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete a payment transaction by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PAYMENT','DELETE')))"
                  }
                }
              }
            ]
          },
          {
            "name": "pdfapplications-api",
            "base": "/pdfapplications-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/swagger-static/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/",
                "rules": {
                  "GET": {
                    "description": "get pdfapplications-api root",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/images/:any",
                "rules": {
                  "GET": {
                    "description": "get PDF images",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/receipts",
                "rules": {
                  "GET": {
                    "description": "get PDF application receipts",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "POST": {
                    "description": "save a PDF application receipt",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/receipts/:guid",
                "rules": {
                  "GET": {
                    "description": "get application PDF receipt by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PUT": {
                    "description": "update application PDF receipt by ID",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "delete an application PDF receipt by ID",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/receipts/:guid/pdf",
                "rules": {
                  "GET": {
                    "description": "get application PDF receipt by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/receiptpdf",
                "rules": {
                  "GET": {
                    "description": "get receipt PDF",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              }
            ]
          },
          {
            "name": "person-api",
            "base": "/person-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/",
                "rules": {
                  "GET": {
                    "description": "get person-api root",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/email",
                "rules": {
                  "GET": {
                    "description": "get person email",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "POST": {
                    "description": "create person email",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/:personID/password",
                "rules": {
                  "PUT": {
                    "description": "set person user account password",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/:token/confirm",
                "rules": {
                  "PUT": {
                    "description": "confirm token",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "progsel-api",
            "base": "/progsel-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/v1/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/admissioncategories",
                "rules": {
                  "GET": {
                    "description": "get institution admission categories",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution admission category",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution admission category",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/admissioncategories/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution admission category by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution admission category by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution admission category by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/AdmissionCategories",
                "rules": {
                  "GET": {
                    "description": "get institution admission categories",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution admission category",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution admission category",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/AdmissionCategories/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution admission category by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution admission category by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution admission category by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/AdmissionCategories",
                "rules": {
                  "PUT": {
                    "description": "update an institution admission category",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/AdmissionCategories/:guid",
                "rules": {
                  "PUT": {
                    "description": "update institution admission category by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/campuses",
                "rules": {
                  "GET": {
                    "description": "get institution campuses",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution campus",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution campus",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/campuses/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution campus by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution campus by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution campus by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Campuses",
                "rules": {
                  "PUT": {
                    "description": "update an institution campus",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Campuses/:guid",
                "rules": {
                  "PUT": {
                    "description": "update institution campus by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/faculties",
                "rules": {
                  "GET": {
                    "description": "get institution faculties",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution faculty",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution faculty",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/faculties/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution faculty by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution faculty by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "get institution faculty by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Faculties",
                "rules": {
                  "PUT": {
                    "description": "update an institution faculty",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Faculties/:guid",
                "rules": {
                  "PUT": {
                    "description": "update institution faculty by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programs",
                "rules": {
                  "GET": {
                    "description": "get institution programs",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution program",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "bulk update institution programs",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programs/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution program by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution program by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution program by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Programs",
                "rules": {
                  "PUT": {
                    "description": "bulk update institution programs",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Programs/:guid",
                "rules": {
                  "PUT": {
                    "description": "update institution program by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programofferings",
                "rules": {
                  "GET": {
                    "description": "get institution program offerings",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution program offering",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution program offering",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programofferings/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution program offering by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution program offering by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution program offering by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/ProgramOfferings",
                "rules": {
                  "PUT": {
                    "description": "update an institution program offering",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/ProgramOfferings/:guid",
                "rules": {
                  "PUT": {
                    "description": "update institution program offering by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programofferingqualifiers",
                "rules": {
                  "GET": {
                    "description": "get institution program offering qualifiers",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution program offering qualifier",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution program offering qualifier",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programofferingqualifiers/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution program offering qualifier by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution program offering qualifier by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution program offering qualifier by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programofferingqualifiertypes",
                "rules": {
                  "GET": {
                    "description": "get institution program offering qualifier types",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution program offering qualifier types",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programofferingqualifiertypes/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution program offering qualifier type by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/terms",
                "rules": {
                  "GET": {
                    "description": "get institution terms",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution term",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution term",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/terms/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution term by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution term by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution term by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Terms",
                "rules": {
                  "PUT": {
                    "description": "update an institution term",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Terms/:guid",
                "rules": {
                  "PUT": {
                    "description": "update institution term by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              }
            ]
          },
          {
            "name": "programselection-api",
            "base": "/programselection-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/v1/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/admissioncategories",
                "rules": {
                  "GET": {
                    "description": "get institution admission categories",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution admission category",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution admission category",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/admissioncategories/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution admission category by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution admission category by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution admission category by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/AdmissionCategories",
                "rules": {
                  "GET": {
                    "description": "get institution admission categories",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution admission category",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution admission category",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/AdmissionCategories/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution admission category by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution admission category by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution admission category by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/AdmissionCategories",
                "rules": {
                  "PUT": {
                    "description": "update an institution admission category",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/AdmissionCategories/:guid",
                "rules": {
                  "PUT": {
                    "description": "update institution admission category by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/campuses",
                "rules": {
                  "GET": {
                    "description": "get institution campuses",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution campus",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution campus",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/campuses/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution campus by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution campus by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution campus by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Campuses",
                "rules": {
                  "PUT": {
                    "description": "update an institution campus",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Campuses/:guid",
                "rules": {
                  "PUT": {
                    "description": "update institution campus by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/faculties",
                "rules": {
                  "GET": {
                    "description": "get institution faculties",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution faculty",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution faculty",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/faculties/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution faculty by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution faculty by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "get institution faculty by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Faculties",
                "rules": {
                  "PUT": {
                    "description": "update an institution faculty",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Faculties/:guid",
                "rules": {
                  "PUT": {
                    "description": "update institution faculty by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programs",
                "rules": {
                  "GET": {
                    "description": "get institution programs",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution program",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "bulk update institution programs",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programs/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution program by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution program by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution program by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Programs",
                "rules": {
                  "PUT": {
                    "description": "bulk update institution programs",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Programs/:guid",
                "rules": {
                  "PUT": {
                    "description": "update institution program by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programofferings",
                "rules": {
                  "GET": {
                    "description": "get institution program offerings",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution program offering",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution program offering",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programofferings/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution program offering by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution program offering by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution program offering by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/ProgramOfferings",
                "rules": {
                  "PUT": {
                    "description": "update an institution program offering",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/ProgramOfferings/:guid",
                "rules": {
                  "PUT": {
                    "description": "update institution program offering by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programofferingqualifiers",
                "rules": {
                  "GET": {
                    "description": "get institution program offering qualifiers",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution program offering qualifier",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution program offering qualifier",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programofferingqualifiers/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution program offering qualifier by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution program offering qualifier by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution program offering qualifier by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programofferingqualifiertypes",
                "rules": {
                  "GET": {
                    "description": "get institution program offering qualifier types",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution program offering qualifier types",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/programofferingqualifiertypes/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution program offering qualifier type by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/terms",
                "rules": {
                  "GET": {
                    "description": "get institution terms",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "POST": {
                    "description": "create an institution term",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution term",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/terms/:guid",
                "rules": {
                  "GET": {
                    "description": "get institution term by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','READ')))"
                  },
                  "PUT": {
                    "description": "update institution term by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete institution term by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Terms",
                "rules": {
                  "PUT": {
                    "description": "update an institution term",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/Terms/:guid",
                "rules": {
                  "PUT": {
                    "description": "update institution term by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'PROG','UPDATE')))"
                  }
                }
              }
            ]
          },
          {
            "name": "questionnaire-api",
            "base": "/questionnaire-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/questionnaire",
                "rules": {
                  "GET": {
                    "description": "get questions and groups tree with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "POST": {
                    "description": "update questions and groups tree with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/activeuser",
                "rules": {
                  "GET": {
                    "description": "get MC active user for institution with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/activeuser/:guid",
                "rules": {
                  "POST": {
                    "description": "set MC active user for institution with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "DELETE": {
                    "description": "unset MC active user for  institution with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/questionsgroups",
                "rules": {
                  "GET": {
                    "description": "get questions and groups tree with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "PUT": {
                    "description": "update questions and groups tree with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              }
            ]
          },
          {
            "name": "questions-api",
            "base": "/questions-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/swagger-static/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/",
                "rules": {
                  "GET": {
                    "description": "get questions-api root",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/questiontypes",
                "rules": {
                  "GET": {
                    "description": "get question types",
                    "expression": "bearer('ROOT_TOKEN','MGT_TOKEN')"
                  },
                  "POST": {
                    "description": "create a question type",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/questiontypes/:code",
                "rules": {
                  "GET": {
                    "description": "get a question type by code",
                    "expression": "bearer('ROOT_TOKEN')"
                  },
                  "PUT": {
                    "description": "update a question type by code",
                    "expression": "bearer('ROOT_TOKEN')"
                  },
                  "DELETE": {
                    "description": "delete a question type by code",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/groupingtypes",
                "rules": {
                  "GET": {
                    "description": "get institution question grouping types",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','READ')))"
                  },
                  "POST": {
                    "description": "create an institution question grouping types",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/groupingtree",
                "rules": {
                  "GET": {
                    "description": "get an institution question grouping tree",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/groupingtypes/:guid",
                "rules": {
                  "GET": {
                    "description": "get an institution question grouping type by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','READ')))"
                  },
                  "PUT": {
                    "description": "update an institution question grouping type by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete an institution question grouping type by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/questions",
                "rules": {
                  "GET": {
                    "description": "get institution question",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','READ')))"
                  },
                  "POST": {
                    "description": "create an institution question",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/questions/:guid",
                "rules": {
                  "GET": {
                    "description": "get an institution question by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','READ')))"
                  },
                  "PUT": {
                    "description": "update an institution question by ID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete an institution question by ID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/questions/:guid/answers",
                "rules": {
                  "GET": {
                    "description": "get an institution question answers by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','READ')))"
                  },
                  "POST": {
                    "description": "create an institution question answer",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','CREATE')))"
                  },
                  "PUT": {
                    "description": "update an institution question answer by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete an institution question answer by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/questions/:guid/answers/:guid2",
                "rules": {
                  "GET": {
                    "description": "get an institution question answers by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','READ')))"
                  },
                  "PUT": {
                    "description": "update an institution question answer by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete an institution question answer by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'QUESTION','DELETE')))"
                  }
                }
              }
            ]
          },
          {
            "name": "rules-api",
            "base": "/rules-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/evaluate/fees",
                "rules": {
                  "POST": {
                    "description": "create a fees evaluation request",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/evaluate/programselection",
                "rules": {
                  "POST": {
                    "description": "create a program selection evaluation request",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/evaluate/questions",
                "rules": {
                  "POST": {
                    "description": "create a questions evaluation request",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/evaluate/rules/:guid",
                "rules": {
                  "POST": {
                    "description": "create a rules evaluation request",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/finalize-fees-questions/:tenantID/:appNum",
                "rules": {
                  "POST": {
                    "description": "create a rules evaluation request",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/extended-rules",
                "rules": {
                  "GET": {
                    "description": "get the extended (include EPBC) rules for an institution",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'RULE','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/rules",
                "rules": {
                  "GET": {
                    "description": "get the rules for an institution",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'RULE','READ')))"
                  },
                  "POST": {
                    "description": "create an institution rule",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'RULE','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/rules/:guid",
                "rules": {
                  "GET": {
                    "description": "get an institution  rule by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'RULE','READ')))"
                  },
                  "PUT": {
                    "description": "update an institution  rule by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'RULE','UPDATE')))"
                  },
                  "DELETE": {
                    "description": "delete an institution  rule by ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'RULE','DELETE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/rules/:guid/usage",
                "rules": {
                  "GET": {
                    "description": "get institution rule usage by ID",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'RULE','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/evaluate/rules/:guid",
                "rules": {
                  "POST": {
                    "description": "create a rule evaluation request",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'RULE','CREATE')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/question-rule-valuations/:refnum",
                "rules": {
                  "GET": {
                    "description": "get question rule valuations for institution and refnum",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root()))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/fee-rule-valuations/:refnum",
                "rules": {
                  "GET": {
                    "description": "get fee rule valuations for institution and refnum",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root()))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/progsel-rule-valuations/:refnum",
                "rules": {
                  "GET": {
                    "description": "get program selection rule valuations for institution and refnum",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root()))"
                  }
                }
              },
              {
                "path": "/references",
                "rules": {
                  "GET": {
                    "description": "get supported object references",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/rules",
                "rules": {
                  "GET": {
                    "description": "get all rules",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/rules/:guid",
                "rules": {
                  "GET": {
                    "description": "get rule by ID",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/testrules",
                "rules": {
                  "GET": {
                    "description": "test validity of all rules against test context",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/validate/programselection/:tenantID/:appNum",
                "rules": {
                  "GET": {
                    "description": "validate application context by application number for tenantID with root or tenant bearer token or ROOT role in Management Console",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              }
            ]
          },
          {
            "name": "schemas-api",
            "base": "/schemas-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/schemas",
                "rules": {
                  "GET": {
                    "description": "get list of configured schemas",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/schemas/:name",
                "rules": {
                  "GET": {
                    "description": "get schema definition by name",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/validate",
                "rules": {
                  "POST": {
                    "description": "validate document against a schema",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "storage-api",
            "base": "/storage-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/document-types",
                "rules": {
                  "GET": {
                    "description": "get document types",
                    "expression": "true"
                  },
                  "POST": {
                    "description": "create document type",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/document-types/:code",
                "rules": {
                  "GET": {
                    "description": "get document type by code",
                    "expression": "true"
                  },
                  "PUT": {
                    "description": "update document type by code",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/files",
                "rules": {
                  "GET": {
                    "description": "get file info records",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "POST": {
                    "description": "create file record and upload contents",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/files/:guid",
                "rules": {
                  "GET": {
                    "description": "get file info record for file identified by guid",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PUT": {
                    "description": "update file info record for file identified by guid",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/files/:guid/contents",
                "rules": {
                  "GET": {
                    "description": "get file data contents for file identified by guid",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PUT": {
                    "description": "update file data contents for file identified by guid",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/file-types",
                "rules": {
                  "GET": {
                    "description": "get file types",
                    "expression": "true"
                  },
                  "POST": {
                    "description": "create file type",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/file-types/:code",
                "rules": {
                  "GET": {
                    "description": "get file type by code",
                    "expression": "true"
                  },
                  "PUT": {
                    "description": "update file type by code",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/files",
                "rules": {
                  "GET": {
                    "description": "get file info records",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "POST": {
                    "description": "create file record and upload contents",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/files/:guid",
                "rules": {
                  "GET": {
                    "description": "get file info record for file identified by guid",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "PUT": {
                    "description": "update file info record for file identified by guid",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/institutions/:tenantID/files/:guid/contents",
                "rules": {
                  "GET": {
                    "description": "get file data contents for file identified by guid",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  },
                  "PUT": {
                    "description": "update file data contents for file identified by guid",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && (root() || role(param(':tenantID'),'ADM','READ')))"
                  }
                }
              },
              {
                "path": "/location-types",
                "rules": {
                  "GET": {
                    "description": "get location types",
                    "expression": "true"
                  },
                  "POST": {
                    "description": "create location type",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/location-types/:code",
                "rules": {
                  "GET": {
                    "description": "get location type by code",
                    "expression": "true"
                  },
                  "PUT": {
                    "description": "update location type by code",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "transcripts-api",
            "base": "/transcripts-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/transcripts/:tenantID",
                "rules": {
                  "POST": {
                    "description": "allow posting an academic batch by institution",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/transcripts/:tenantID/:batchID",
                "rules": {
                  "GET": {
                    "description": "allow getting an academic batch by institution",
                    "expression": "bearer('ROOT_TOKEN',param(':tenantID')) || (bearer('MGT_TOKEN') && root())"
                  }
                }
              }
            ]
          },
          {
            "name": "users-api",
            "base": "/users-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/metrics",
                "rules": {
                  "PUT": {
                    "description": "set metrics/?pause=yes or no",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/account/:identifier",
                "rules": {
                  "GET": {
                    "description": "get user account",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/activity-types",
                "rules": {
                  "GET": {
                    "description": "get all activity types",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/activity-types/:activityCode/subtypes",
                "rules": {
                  "GET": {
                    "description": "get an activity's subtypes",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/bcsc/:identifier",
                "rules": {
                  "GET": {
                    "description": "get BCSC Attributes by identifier (one of userGUID, did, username)",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/languages",
                "rules": {
                  "GET": {
                    "description": "get languages",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/users/:userGUID/bcsc",
                "rules": {
                  "POST": {
                    "description": "add BC Attributes record for userGUID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/bcsc/:did",
                "rules": {
                  "PATCH": {
                    "description": "update BCSC Attributes for did",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "delete BCSC Attributes of did",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/emails",
                "rules": {
                  "GET": {
                    "description": "get emails",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/emails/:address",
                "rules": {
                  "GET": {
                    "description": "check for specific email address",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/frequency-types",
                "rules": {
                  "GET": {
                    "description": "get all frequency types",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/reference-types",
                "rules": {
                  "GET": {
                    "description": "get all reference types",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/userinfo/:identifier",
                "rules": {
                  "GET": {
                    "description": "get user information (legacy)",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PUT": {
                    "description": "update user information",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/userinfo-exists",
                "rules": {
                  "GET": {
                    "description": "check for user info by firstname,lastname and birthdate",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users",
                "rules": {
                  "GET": {
                    "description": "get users",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "POST": {
                    "description": "create a user",
                    "expression": "bearer('ROOT_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid",
                "rules": {
                  "GET": {
                    "description": "get user by guid",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/academic-history",
                "rules": {
                  "GET": {
                    "description": "get user academic history",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/academic-history/:guid",
                "rules": {
                  "GET": {
                    "description": "get user academic history by guid",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PUT": {
                    "description": "put user academic history by guid",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "delete user academic history by guid",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/activities",
                "rules": {
                  "GET": {
                    "description": "get user activities",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "POST": {
                    "description": "add a user activity",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid1/activities/:guid2",
                "rules": {
                  "DELETE": {
                    "description": "delete a user activity",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/applications/:guid",
                "rules": {
                  "PUT": {
                    "description": "put user applications by guid",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/apply-status",
                "rules": {
                  "GET": {
                    "description": "get user apply status",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/contacts",
                "rules": {
                  "GET": {
                    "description": "get user contacts",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/contacts",
                "rules": {
                  "POST": {
                    "description": "add a user contact",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:userGUID/contacts/:contactGUID",
                "rules": {
                  "DELETE": {
                    "description": "delete a user contact",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/declarations",
                "rules": {
                  "GET": {
                    "description": "get user accepted declarations with option query params",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/declarations/:declarationGUID",
                "rules": {
                  "GET": {
                    "description": "get a user accepted declaration identified by declaration ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "POST": {
                    "description": "a user accepts a declaration identified by declaration ID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/emails",
                "rules": {
                  "GET": {
                    "description": "get user email addresses",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "POST": {
                    "description": "create a new user email address",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/emails/:emailGUID",
                "rules": {
                  "GET": {
                    "description": "get a user email address by its GUID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PUT": {
                    "description": "update a user email address by its GUID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "DELETE": {
                    "description": "delete a user email address by its GUID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  },
                  "PATCH": {
                    "description": "patch a user email address by its GUID",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/identity",
                "rules": {
                  "GET": {
                    "description": "get user identity",
                    "expression": "bearer('ROOT_TOKEN','SIGN_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/institutions/:epbcID/academic-history",
                "rules": {
                  "POST": {
                    "description": "post user academic history by institution",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/users/:guid/logging-details",
                "rules": {
                  "GET": {
                    "description": "get user logging details",
                    "expression": "bearer('ROOT_TOKEN','SIGN_TOKEN') || (bearer('MGT_TOKEN') && root())"
                  }
                }
              },
              {
                "path": "/visa-statuses",
                "rules": {
                  "GET": {
                    "description": "get visa statuses",
                    "expression": "true"
                  }
                }
              }
            ]
          },
          {
            "name": "utility-api",
            "base": "/utility-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/swagger-static/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/",
                "rules": {
                  "GET": {
                    "description": "get utility-api root",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/message",
                "rules": {
                  "GET": {
                    "description": "get utility message",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "PUT": {
                    "description": "put utility message",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "POST": {
                    "description": "post utility message",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/formschema",
                "rules": {
                  "GET": {
                    "description": "get utility formschema",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "PUT": {
                    "description": "put utility formschema",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "POST": {
                    "description": "post utility formschema",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/voucher",
                "rules": {
                  "GET": {
                    "description": "get utility voucher",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "PUT": {
                    "description": "put utility voucher",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  },
                  "POST": {
                    "description": "post utility voucher",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/email",
                "rules": {
                  "POST": {
                    "description": "post utility email",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/refresh",
                "rules": {
                  "GET": {
                    "description": "get utility refresh with root bearer token",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "programs-api",
            "base": "/programs-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/info",
                "rules": {
                  "GET": {
                    "description": "get API info",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/stats",
                "rules": {
                  "GET": {
                    "description": "get API statistics",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/openapi/:any",
                "rules": {
                  "GET": {
                    "description": "get Swagger API documentation",
                    "expression": "bearer('CADDY_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel",
                "rules": {
                  "GET": {
                    "description": "get API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admin/loglevel/:level",
                "rules": {
                  "PUT": {
                    "description": "set API log level",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/",
                "rules": {
                  "GET": {
                    "description": "get programs-api root",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/admissionCategories/:guid/names",
                "rules": {
                  "GET": {
                    "description": "get admission categories by guid",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/campuses/:guid/names",
                "rules": {
                  "GET": {
                    "description": "get campuses by guid",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/faculties/:guid/names",
                "rules": {
                  "GET": {
                    "description": "get faculties by guid",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/programs/:guid/names",
                "rules": {
                  "GET": {
                    "description": "get programs by guid",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/terms/:guid/names",
                "rules": {
                  "GET": {
                    "description": "get terms by guid",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/users/:userGUID/institutions/:epbcID/admissionCategories",
                "rules": {
                  "GET": {
                    "description": "get admission categories",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/users/:userGUID/institutions/:epbcID/campuses",
                "rules": {
                  "GET": {
                    "description": "get campuses",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/users/:userGUID/institutions/:epbcID/faculties",
                "rules": {
                  "GET": {
                    "description": "get faculties",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/users/:userGUID/institutions/:epbcID/programs",
                "rules": {
                  "GET": {
                    "description": "get programs",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/users/:userGUID/institutions/:epbcID/terms",
                "rules": {
                  "GET": {
                    "description": "get terms",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/users/:userGUID/programOfferings/:guid",
                "rules": {
                  "GET": {
                    "description": "get program offerings by guid",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              },
              {
                "path": "/users/:userGUID/programOfferings",
                "rules": {
                  "GET": {
                    "description": "get program offerings",
                    "expression": "bearer('ROOT_TOKEN','APPL_TOKEN')"
                  }
                }
              }
            ]
          },
          {
            "name": "test-api",
            "base": "/test-api/v1",
            "paths": [
              {
                "path": "/health",
                "rules": {
                  "GET": {
                    "description": "get API health",
                    "expression": "true"
                  }
                }
              },
              {
                "path": "/tests",
                "rules": {
                  "GET": {
                    "description": "get",
                    "expression": "bearer('ROOT_TOKEN')"
                  },
                  "POST": {
                    "description": "post",
                    "expression": "bearer('ROOT_TOKEN')"
                  }
                }
              },
              {
                "path": "/tests/:tenantID",
                "rules": {
                  "GET": {
                    "description": "get",
                    "expression": "bearer('ROOT_TOKEN')"
                  },
                  "POST": {
                    "description": "post",
                    "expression": "bearer('ROOT_TOKEN') || (bearer(param(':tenantID')) && signature(param(':tenantID')))"
                  }
                }
              }
            ]
          }
        ]
      },
      {
        "name": "Public Log Host",
        "hosts": [
          "dev-logs.educationplannerbc.ca"
        ],
        "default": "deny",
        "checks": [
          {
            "name": "public logs service",
            "base": "",
            "paths": [
              {
                "path": "/wss",
                "rules": {
                  "GET": {
                    "description": "get logs stream over secure web socket",
                    "expression": "bearer('ROOT_TOKEN','LCAT_TOKEN')"
                  }
                }
              }
            ]
          }
        ]
      },
      {
        "name": "Private Log Host",
        "hosts": [
          "dev-logs-private.educationplannerbc.ca"
        ],
        "default": "deny",
        "checks": [
          {
            "name": "private logs service",
            "base": "",
            "paths": [
              {
                "path": "/ws",
                "rules": {
                  "GET": {
                    "description": "get logs stream over private web socket",
                    "expression": "bearer('ROOT_TOKEN','LCAT_TOKEN')"
                  }
                }
              }
            ]
          }
        ]
      }
    ]
  }
}